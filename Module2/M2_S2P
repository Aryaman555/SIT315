using System;
using System.Diagnostics;
using System.Threading.Tasks; // Import for Parallel

namespace VectorAddition
{
    class Program
    {
        static Random rand = new Random(); // Random number generator

        // Function to fill a vector with random numbers
        static void RandomVector(int[] vector)
        {
            for (int i = 0; i < vector.Length; i++)
            {
                vector[i] = rand.Next(100); // Generate a random number between 0 and 99
            }
        }

        static void Main(string[] args)
        {
            int size = 100000000; // Size of the vectors

            int[] v1 = new int[size]; // First vector
            int[] v2 = new int[size]; // Second vector
            int[] v3 = new int[size]; // Result vector

            RandomVector(v1); // Fill v1 with random numbers
            RandomVector(v2); // Fill v2 with random numbers

            Stopwatch stopwatch = new Stopwatch(); // Stopwatch to measure time

            // Sequential Addition
            stopwatch.Start(); // Start the stopwatch
            for (int i = 0; i < size; i++)
            {
                v3[i] = v1[i] + v2[i]; // Perform addition sequentially
            }
            stopwatch.Stop(); // Stop the stopwatch
            Console.WriteLine($"Sequential Time: {stopwatch.ElapsedMilliseconds} milliseconds"); // Display sequential time

            // Parallel Addition
            v3 = new int[size]; // Reset v3 for parallel addition
            stopwatch.Reset(); // Reset the stopwatch
            stopwatch.Start(); // Start the stopwatch
            Parallel.For(0, size, i => // Parallel loop for addition
            {
                v3[i] = v1[i] + v2[i]; // Perform addition in parallel
            });
            stopwatch.Stop(); // Stop the stopwatch
            Console.WriteLine($"Parallel Time: {stopwatch.ElapsedMilliseconds} milliseconds"); // Display parallel time

            Console.ReadLine(); // Keep the console window open
        }
    }
}
